version: '3.8'

services:
  # ---------- Databases ----------
  mongodb:
    image: mongo:6.0
    container_name: parcel-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "-u", "admin", "-p", "password", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  eureka-server:
    image: steeltoeoss/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
      EUREKA_SERVER_ENABLE_SELF_PRESERVATION: "false"
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka-server:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ---------- Kafka & Zookeeper ----------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: parcel-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: parcel-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped

  # ---------- Keycloak & Auth ----------
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_HTTP_ENABLED: 'true'
      KC_HOSTNAME_STRICT: 'false'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      KC_IMPORT: /opt/keycloak/data/import/realm.json
    ports:
      - "8089:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/realm-config:/opt/keycloak/data/import
    command: ["start-dev", "--import-realm"]
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/master"]
      interval: 30s
      timeout: 10s
      retries: 10

  # Add Redis service
  redis:
    image: redis:7-alpine
    container_name: parcel-redis
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: redispass
    command: redis-server --requirepass redispass
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: redispass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8083:8083"
    environment:
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/parcel-realm
      KEYCLOAK_REALM: parcel-realm
      KEYCLOAK_CLIENT: auth-service
      KEYCLOAK_SECRET: your-client-secret
      KEYCLOAK_ADMIN_USER: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      keycloak:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ---------- Microservices ----------
  consolidation-service:
    build:
      context: ./services/consolidation-service
      dockerfile: Dockerfile
    container_name: consolidation-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/parcel_consolidation_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  warehouse-service:
    build:
      context: ./services/warehouse-service
      dockerfile: Dockerfile
    container_name: warehouse-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/warehouse_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  pricing-service:
    build:
      context: ./services/pricing-service
      dockerfile: Dockerfile
    container_name: pricing-service
    ports:
      - "8086:8086"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/pricing_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8090:8090"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/payment_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  chatbot-service:
    build:
      context: ./services/chatbot-service
      dockerfile: Dockerfile
    container_name: sparrow-agent
    ports:
      - "8088:8080"
    environment:
      FLASK_SECRET_KEY: "${FLASK_SECRET_KEY}"
      FLASK_DEBUG: "False"
      PORT: "8080"
      AUTH_SERVICE_URL: "http://auth-service:8083"
      WAREHOUSE_SERVICE_URL: "http://warehouse-service:8082"
      CONSOLIDATION_SERVICE_URL: "http://consolidation-service:8081"
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 20s

  eta-service:
    build:
      context: ./services/eta-service
      dockerfile: Dockerfile
    container_name: eta-service
    ports:
      - "8087:8080"
    environment:
      FLASK_SECRET_KEY: "${FLASK_SECRET_KEY}"
      FLASK_DEBUG: "False"
      PORT: "8080"
      AUTH_SERVICE_URL: "http://auth-service:8083"
      WAREHOUSE_SERVICE_URL: "http://warehouse-service:8082"
      CONSOLIDATION_SERVICE_URL: "http://consolidation-service:8081"
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 20s

  parcel-service:
    build:
      context: ./services/parcel-service
      dockerfile: Dockerfile
    container_name: parcel-service
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/parcel_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - parcel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

# ---------- Networks & Volumes ----------
networks:
  parcel-network:
    driver: bridge

volumes:
  mongodb_data:
  keycloak_data: