plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.sparrow'
version = '1.0.0'
description = 'Authentication and User Management Service for Sparrow Parcel Consolidation Platform'
sourceCompatibility = '17'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // Remove the logging exclusion that was causing conflicts
}

repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/milestone"
    }
}

ext {
    springCloudVersion = '2024.0.0'
    // Use Keycloak version that's stable with Spring Boot 3.x
    keycloakVersion = '22.0.5'
    springdocVersion = '2.2.0'
    testcontainersVersion = '1.19.3'
    jjwtVersion = '0.11.5'
    lombokVersion = '1.18.30'
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Spring Cloud Dependencies
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

    // Keycloak Dependencies - Use compatible version
    implementation "org.keycloak:keycloak-admin-client:${keycloakVersion}"

    // Jakarta JAX-RS API (for Spring Boot 3.x compatibility)
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'

    // Use compatible RESTEasy version with Jakarta EE
    implementation 'org.jboss.resteasy:resteasy-client:6.2.4.Final'
    implementation 'org.jboss.resteasy:resteasy-jackson2-provider:6.2.4.Final'

    // Add explicit JAX-RS implementation for better compatibility
    implementation 'org.glassfish.jersey.core:jersey-client:3.1.3'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.3'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.1.3'


    // JWT Processing
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // OpenAPI/Swagger Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springdocVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Configuration Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Database Support
    runtimeOnly 'com.h2database:h2'

    // Caching Support
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // HTTP Client
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Jackson for JSON processing
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'

    // Apache Commons Utilities
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'commons-validator:commons-validator:1.8.0'

    // Password Strength Validation
    implementation 'org.passay:passay:1.6.4'

    // Rate Limiting
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-caffeine:7.6.0'

    // Micrometer for metrics
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Testing Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'

    // Testcontainers for integration testing
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:keycloak:${testcontainersVersion}"

    // Testing utilities
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.1'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()

    jvmArgs = [
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]

    systemProperty 'spring.profiles.active', 'test'

    reports {
        junitXml.required = true
        html.required = true
    }

    failFast = false
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    finalizedBy jacocoTestReport
}

// Jacoco Configuration
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
                    '**/config/**',
                    '**/exception/**',
                    '**/*Application.*',
                    '**/*Config.*'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
        }
    }
}

// SonarQube Configuration
sonarqube {
    properties {
        property "sonar.projectName", "Sparrow Auth Service"
        property "sonar.projectKey", "sparrow-auth-service"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.exclusions", "**/dto/**, **/config/**, **/exception/**, **/*Application.java, **/*Config.java"
    }
}

jar {
    enabled = false
    archiveBaseName = "${project.name}"
    archiveVersion = "${project.version}"
}

bootJar {
    enabled = true
    archiveFileName = "${project.name}-${project.version}.jar"
    manifest {
        attributes(
                'Implementation-Title': project.description,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Date': new Date().toString()
        )
    }
}

// Custom tasks
task printVersion {
    doLast {
        println "Version: ${project.version}"
    }
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/dependencies'
}

task dockerBuildImage(type: Exec) {
    group 'docker'
    description 'Build Docker image'
    commandLine 'docker', 'build', '-t', "${project.name}:${project.version}", '.'
    dependsOn bootJar
}

task bootRunDev(type: org.springframework.boot.gradle.tasks.run.BootRun) {
    group 'application'
    description 'Run the application with development profile'
    systemProperty 'spring.profiles.active', 'development'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.sparrow.auth_service.AuthServiceApplication'
}

compileJava {
    options.compilerArgs += [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
}

clean {
    delete 'logs'
    delete 'build'
    delete '.gradle'
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    'description': project.description,
                    'author': 'Sparrow Team'
            ]
        }
    }
}