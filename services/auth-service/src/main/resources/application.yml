# Application Configuration
spring:
  application:
    name: auth-service
  
  # Database Configuration (for user management)
  datasource:
    url: jdbc:h2:mem:authdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:

  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop  # Use 'update' in production
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  # Spring Security OAuth2 Resource Server Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/parcel-realm
          jwk-set-uri: http://keycloak:8080/realms/parcel-realm/protocol/openid-connect/certs

  # Web Configuration
  web:
    resources:
      add-mappings: false

  # MVC Configuration

  # Eureka Client Configuration
  cloud:
    loadbalancer:
      enabled: true

  # Actuator Configuration
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics,env,beans
    endpoint:
      health:
        show-details: always
      metrics:
        enabled: true
    health:
      circuitbreakers:
        enabled: true

  # Logging Configuration
  logging:
    level:
      com.sparrow.auth: DEBUG
      org.springframework.security: DEBUG
      org.keycloak: DEBUG
      org.hibernate.sql: DEBUG
      org.hibernate.type: TRACE
    pattern:
      console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

  # Jackson Configuration
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: UTC
    default-property-inclusion: non_null

# Server Configuration
server:
  port: 8083
  servlet:
    context-path: /

# Eureka Client Configuration
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance-id:${random.value}}
    hostname: auth-service
    appname: auth-service
    status-page-url-path: /actuator/info
    health-check-url-path: /actuator/health

# Keycloak Configuration - UPDATED TO MATCH CODE EXPECTATIONS
keycloak:
  # Standard Keycloak properties (used by your code)
  auth-server-url: http://keycloak:8080
  realm: parcel-realm
  resource: auth-service
  credentials:
    secret: auth-service-secret

  # Admin configuration
  admin:
    username: admin
    password: admin123

  # Additional configuration (for backward compatibility)
  url: http://keycloak:8080  # Alternative name used in some places
  client:
    id: auth-service         # Alternative name
    secret: auth-service-secret # Alternative name

  # Token Configuration
  token:
    expiration: 3600  # 1 hour
    refresh-expiration: 7200  # 2 hours

  # Connection Configuration
  connection:
    pool-size: 20
    connection-timeout: 30000
    socket-timeout: 30000

# Security Configuration
security:
  jwt:
    secret: your-jwt-secret-key-here-change-in-production  # Change this in production
    expiration: 86400000  # 24 hours
    issuer: auth-service
  cors:
    allowed-origins: http://localhost:3000,http://localhost:8080,http://localhost:8083
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      keycloakClient:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      keycloakRetry:
        maxAttempts: 3
        waitDuration: 1000
        retryExceptions:
          - org.springframework.web.client.ResourceAccessException
          - java.net.ConnectException

# Feign Client Configuration (if using)
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic
  circuitbreaker:
    enabled: true

# Spring Doc OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  packages-to-scan: com.sparrow.auth.controller
  default-produces-media-type: application/json

# Custom Application Properties
app:
  version: 1.0.0
  name: Auth Service
  description: Authentication and Authorization Microservice
  cors:
    allowed-origins: http://localhost:3000,http://localhost:8080
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
    exposed-headers: Authorization,Content-Type
    max-age: 3600